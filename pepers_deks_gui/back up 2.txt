import asyncio
import math
import random
import time
import keyboard
import numpy as np
from tkinter import filedialog as fd
from tkinter import *
import tkinter.messagebox as message
from tag import Tag


class peers_gui():   #Логика и форма

    def __init__(self):
        self.count = 0   #Подсчет количества прокруток колесика мыши
        self.cursorpos = []   #Координаты курсора
        self.flagactivescroll = True   #Флаг прокрутки (защита от многократной прокрутки)
        def mouse_wheel(event):
            if event.num == 5 or event.delta == -120:
                if self.count > 0:
                    if self.flagactivescroll:
                        self.flagactivescroll = False
                        self.count -= 1
                        flaginout = False   #Приближение/отдаление
                        self.zoom(flaginout)
                        self.canvas.delete('tt')
                        self.canvas.create_oval((5-self.startxnow)*self.pxinX-int(50*10/(self.maxxnow-self.startxnow)),
                                                self.canvas.winfo_height() - (5-self.startynow)*self.pxinY-int(50*10/(self.maxynow-self.startynow)),
                                                (5-self.startxnow)*self.pxinX+int(50*10/(self.maxxnow-self.startxnow)),
                                                self.canvas.winfo_height() - (5-self.startynow)*self.pxinY+int(50*10/(self.maxynow-self.startynow)), tag='tt')
                        self.flagactivescroll = True
            if event.num == 4 or event.delta == 120:
                if self.count < 5:
                    if self.flagactivescroll:
                        self.flagactivescroll = False
                        self.count += 1
                        flaginout = True
                        self.zoom(flaginout)
                        self.canvas.delete('tt')
                        self.canvas.create_oval((5-self.startxnow)*self.pxinX-int(50*10/(self.maxxnow-self.startxnow)),
                                                self.canvas.winfo_height() - (5-self.startynow)*self.pxinY-int(50*10/(self.maxynow-self.startynow)),
                                                (5-self.startxnow)*self.pxinX+int(50*10/(self.maxxnow-self.startxnow)),
                                                self.canvas.winfo_height() - (5-self.startynow)*self.pxinY+int(50*10/(self.maxynow-self.startynow)), tag='tt')
                        self.flagactivescroll = True

        def Mousecoords(event):
            pointxy = (event.x, self.canvas.winfo_height()-event.y)
            self.cursorpos = list(pointxy)

        self.tk = Tk()   #Форма
        self.WIDTHSCREEN = self.tk.winfo_screenwidth()   #Ширина монитора
        self.HEIGHTSCREEN = self.tk.winfo_screenheight()   #Высота монитора
        self.tk.overrideredirect(True)   #Рамка
        self.web_message_buffer =[]    #Название окна
        self.tk.minsize(width=int(self.WIDTHSCREEN / 2), height=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3))
        self.tk.maxsize(width=int(self.WIDTHSCREEN / 2), height=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3))
        self.tk.wm_geometry(
            "+%d+%d" % (int(self.WIDTHSCREEN / 2 - self.WIDTHSCREEN / 4),
                        int(self.HEIGHTSCREEN / 2 - (self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) / 2)))
        self.tk["bg"] = "light grey"

        self.canvas = Canvas(self.tk, bg='white')
        self.canvas.pack()
        self.canvas.place(x=150, y=55, width=int(self.WIDTHSCREEN / 2 - 280), height=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3)-250)

        self.labelx = Label(text="X", bg='light grey')   #Размер OX
        self.labely = Label(text="Y", bg='light grey')   #Размер OY
        self.labelx.pack()
        self.labely.pack()
        self.labelx.place(x=5, y=55)
        self.labely.place(x=5, y=90)
        self.labelx.update()
        self.labely.update()

        self.x = StringVar()
        self.y = StringVar()

        self.entryWIDTH = Entry(textvariable=self.x)   #Поле воода X
        self.entryWIDTH.pack()
        self.entryWIDTH.place(x=5 + self.labelx.winfo_width() + 3, y=55, width=60, height=30)
        self.entryHEIGHT = Entry(textvariable=self.y)    #Поле воода Y
        self.entryHEIGHT.pack()
        self.entryHEIGHT.place(x=5 + self.labely.winfo_width() + 3, y=90, width=60, height=30)

        self.listcoords = Listbox(self.tk, bd=3, font=("Arial", 11))   #Табло названий и координат меток
        self.listcoords.pack()
        self.listcoords.place(x=150, y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3)-160,
                              width=self.canvas.winfo_width()-250, height=150)
        self.listcoords.update()

        self.listcolors = Listbox(self.tk, bd=3, font=("Arial", 11))   #Табло цветов меток
        self.listcolors.pack()
        self.listcolors.place(x=150+self.listcoords.winfo_width()+5, y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3)-160,
                              width=245, height=150)
        self.listcolors.update()

        self.labelmas = []   #Градуировка осей

        for i in range(20):
            self.labelmas.append(Label)
        for i in range(20):
            self.labelmas[i] = Label(text=str(" "), bg='light grey', font=("Arial", 9))
            self.labelmas[i].pack()
            self.labelmas[i].place(x=1000000, y=1000000)
        self.label0x = Label(text=" ", bg='light grey', font=("Arial", 9))
        self.label0x.pack()
        self.label0x.place(x=1000000, y=1000000)
        self.label0y = Label(text=" ", bg='light grey', font=("Arial", 9))
        self.label0y.pack()
        self.label0y.place(x=1000000, y=1000000)

        self.pxinX = 1   #Пикселей в 1 метре OX
        self.pxinY = 1   #Пикселей в 1 метре OY
        self.WIDTHx = 1   #Ширина оси OX
        self.HEIGHTy = 1   #Высота оси OY

        self.butstart = Button(text='START', bg='silver', command=self.start, bd=4, font=("Arial", 9))   #Кнопка START
        self.butstart.pack()
        self.butstart.place(x=5, y=5, width=60, height=30)

        self.butcreate = Button(text='CREATE', bg='silver', command=self.create, bd=4, font=("Arial", 9))   #Кнопка CREATE
        self.butcreate.pack()
        self.butcreate.place(x=5, y=130, width=65, height=30)
        self.butstart["state"] = "disabled"

        self.butclose = Button(text='×', bg='red', command=self.close, bd=2, font=("Arial", 20))   #Кнопка закрытия программы
        self.butclose.pack()
        self.butclose.place(x=int(self.WIDTHSCREEN / 2 - 30), y=5, width=25, height=25)

        self.tags = []   #Массив меток
        self.tagcolor = " "   #Цвет метки

        #Кнопки выбора цвета для меток
        self.butblack = Button(text='', bg='black', command=lambda: self.setcolor("black"), bd=1)
        self.butgreen = Button(text='', bg='green', command=lambda: self.setcolor("green"), bd=1)
        self.butyellow = Button(text='', bg='yellow', command=lambda: self.setcolor("yellow"), bd=1)
        self.butblue = Button(text='', bg='blue', command=lambda: self.setcolor("blue"), bd=1)
        self.butorange = Button(text='', bg='orange', command=lambda: self.setcolor("orange"), bd=1)
        self.butred = Button(text='', bg='red', command=lambda: self.setcolor("red"), bd=1)
        self.butblack.pack()
        self.butgreen.pack()
        self.butyellow.pack()
        self.butblue.pack()
        self.butorange.pack()
        self.butred.pack()
        self.butblack.place(x=150 + self.canvas.winfo_width() + 5,
                            y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 90, width=0, height=0)
        self.butgreen.place(x=150 + self.canvas.winfo_width() + 5,
                            y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 15, width=0, height=0)
        self.butyellow.place(x=150 + self.canvas.winfo_width() + 5,
                             y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 30, width=0, height=0)
        self.butblue.place(x=150 + self.canvas.winfo_width() + 5,
                           y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 45, width=0, height=0)
        self.butorange.place(x=150 + self.canvas.winfo_width() + 5,
                             y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 60, width=0, height=0)
        self.butred.place(x=150 + self.canvas.winfo_width() + 5,
                          y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 75, width=0, height=0)

        self.canvas.bind("<MouseWheel>", mouse_wheel)   #Прокручивание колесика на канвасе
        self.canvas.bind('<Motion>', Mousecoords)   #Отслеживание координат курсора на канвасе
        self.updateflag = 0   #Флаг обновления меток
        self.checkfloatWIDTH = False   #Проверка на правильность ввода ширины
        self.checkfloatHEIGHT = False   #Проверка на правильность ввода высоты
        self.startxnow = 0   #Начальное значение оси OX в данный момент
        self.startynow = 0   #Начальное значение оси OY в данный момент
        self.maxxnow = 0   #Конечное значение оси OX в данный момент
        self.maxynow = 0   #Конечное значение оси OY в данный момент

    def zoom(self, flaginout):
        if self.count != 5:
            lines = 10-self.count   #Количество оставшихся линий разметки
        if self.count == 5:   #Предел приближения
            lines = 5
        self.canvas.delete('grid')   #Очитка старой сетки
        for i in range(20):   #Очитска старой градуировки
            self.labelmas[i]["text"] = " "
            self.labelmas[i].place(x=1000000, y=1000000)

        #Координаты курсора в метрической системе по сетке
        cfloorx = math.floor(self.cursorpos[0] / self.pxinX+self.startxnow)
        cfloory = math.floor(self.cursorpos[1] / self.pxinY+self.startynow)
        if self.cursorpos[0] / self.pxinX + self.startxnow - cfloorx < 0.5:
            coordcursX = math.floor(self.cursorpos[0] / self.pxinX + self.startxnow)
        else:
            coordcursX = math.floor(self.cursorpos[0] / self.pxinX + self.startxnow) + 0.5
        if self.cursorpos[1] / self.pxinY + self.startynow - cfloory < 0.5:
            coordcursY = math.floor(self.cursorpos[1] / self.pxinY + self.startynow)
        else:
            coordcursY = math.floor(self.cursorpos[1] / self.pxinY + self.startynow) + 0.5

        if self.cursorpos[0] / self.pxinX + self.startxnow-coordcursX > 0.25:
            coordcursX = coordcursX + 0.5
        if self.cursorpos[1] / self.pxinY + self.startynow-coordcursY > 0.25:
            coordcursY = coordcursY + 0.5

        #При отдаление на столько же раз, на сколько и приблизили. возвращаемся к изначальной разметке
        if self.count == 0:
            self.pxinX = float(self.canvas.winfo_width() / self.WIDTHx)
            self.pxinY = float(self.canvas.winfo_height() / self.HEIGHTy)
            self.marking(10, 0, 0, self.WIDTHx, self.HEIGHTy, self.pxinX, self.pxinY)
            self.maxxnow = self.WIDTHx
            self.maxynow = self.HEIGHTy
            self.startxnow = 0
            self.startynow = 0
        else:
            if flaginout:
                self.zoomin(lines, coordcursX, coordcursY)   #Приближение
            else:
                self.zoomout(lines)   #Отдаление

    def zoomin(self, lines, coordcursX, coordcursY):   #Приближение
        #Поиск максимальных и минимальных значений осей
        flagmax = False
        if (self.maxxnow-0.5) - coordcursX < (self.maxxnow - self.startxnow - 1) / 2:
            self.startxnow = self.startxnow + 1
            flagmax = True

        flagmin = False
        if flagmax == False:
            if coordcursX - (self.startxnow + 0.5) < (self.maxxnow - self.startxnow - 1) / 2:
                self.maxxnow = self.maxxnow - 1
                flagmin = True

        if flagmax == False and flagmin == False:
            self.startxnow = self.startxnow + 0.5
            self.maxxnow = self.maxxnow - 0.5

        flagmax = False
        if (self.maxynow - 0.5) - coordcursY < (self.maxynow - self.startynow - 1) / 2:
            self.startynow = self.startynow + 1
            flagmax = True

        flagmin = False
        if flagmax == False:
            if coordcursY - (self.startynow + 0.5) < (self.maxynow - self.startynow - 1) / 2:
                self.maxynow = self.maxynow - 1
                flagmin = True

        if flagmax == False and flagmin == False:
           self.startynow = self.startynow + 0.5
           self.maxynow = self.maxynow - 0.5

        self.pxinX = float(self.canvas.winfo_width() / (self.maxxnow - self.startxnow))   #Новое значение пикселей на метр OX
        self.pxinY = float(self.canvas.winfo_height() / (self.maxynow - self.startynow))   #Новое значение пикселей на метр OY
        self.marking(lines, self.startxnow, self.startynow, self.maxxnow, self.maxynow, self.pxinX, self.pxinY)   #Разметка и градуировка

    def zoomout(self, lines):   #Отдаление
        #Поиск максимальных и минимальных значений осей
        flagmax = False
        if self.maxxnow + 0.5 > 10:
            self.startxnow = self.startxnow - 1
            flagmax = True

        flagmin = False
        if flagmax == False:
            if self.startxnow - 0.5 < 0:
                self.maxxnow = self.maxxnow + 1
                flagmin = True

        if flagmax == False and flagmin == False:
            self.startxnow = self.startxnow - 0.5
            self.maxxnow = self.maxxnow + 0.5

        flagmax = False
        if self.maxynow + 0.5 > 10:
            self.startynow = self.startynow - 1
            flagmax = True

        flagmin = False
        if flagmax == False:
            if self.startynow - 0.5 < 0:
                self.maxynow = self.maxynow + 1
                flagmin = True

        if flagmax == False and flagmin == False:
           self.startynow = self.startynow - 0.5
           self.maxynow = self.maxynow + 0.5

        self.pxinX = float(self.canvas.winfo_width() / (self.maxxnow - self.startxnow))   #Новое значение пикселей на метр OX
        self.pxinY = float(self.canvas.winfo_height() / (self.maxynow - self.startynow))   #Новое значение пикселей на метр OY
        self.marking(lines, self.startxnow, self.startynow, self.maxxnow, self.maxynow, self.pxinX, self.pxinY)   #Разметка и градуировка

    def setcolor(self, color):   #Выбор цвета метки
        self.tagcolor = color
        self.tags[self.select[0]].color = self.tagcolor
        self.select = []
        self.listcolors.select_clear(0, 'end')
        #Скрытие панели выбора цвета
        self.butblack.place(x=150 + self.canvas.winfo_width() + 5,
                            y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 90, width=0, height=0)
        self.butgreen.place(x=150 + self.canvas.winfo_width() + 5,
                            y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 15, width=0, height=0)
        self.butyellow.place(x=150 + self.canvas.winfo_width() + 5,
                             y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 30, width=0, height=0)
        self.butblue.place(x=150 + self.canvas.winfo_width() + 5,
                           y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 45, width=0, height=0)
        self.butorange.place(x=150 + self.canvas.winfo_width() + 5,
                             y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 60, width=0, height=0)
        self.butred.place(x=150 + self.canvas.winfo_width() + 5,
                          y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 75, width=0, height=0)

    def isFloat(self, value):   #Проверка правильности ввода
        try:
            float(value)
            return True
        except ValueError:
            return False

    def create(self):   #Кнопка CREATE
        self.WIDTHx = self.x.get()   #Запись значени из поля ввода ширины
        self.HEIGHTy = self.y.get()   #Запись значения из поля ввода высота
        self.checkfloatWIDTH = self.isFloat(self.WIDTHx)   #Проверка на правильность ввода ширины
        self.checkfloatHEIGHT = self.isFloat(self.HEIGHTy)   #Проверка на привильность ввода высоты
        if self.checkfloatWIDTH:
            self.WIDTHx = float(self.x.get())
            self.maxxnow = self.WIDTHx
        if self.checkfloatHEIGHT:
            self.HEIGHTy = float(self.y.get())
            self.maxynow = self.HEIGHTy
        if (self.checkfloatHEIGHT and self.checkfloatWIDTH):
            self.pxinX = float(self.canvas.winfo_width() / self.WIDTHx)
            self.pxinY = float(self.canvas.winfo_height() / self.HEIGHTy)
            self.marking(10, 0, 0, self.WIDTHx, self.HEIGHTy, self.pxinX, self.pxinY)   #Сетка и градуировка
            self.butstart["state"] = "active"   #Активация кнопки START
        else:
            msg = "Error input"   #Сообщение об ошибке ввода
            message.showerror("Error", msg)
        self.canvas.create_oval(self.canvas.winfo_width() / 2 - 50,
                                self.canvas.winfo_height() - self.canvas.winfo_height() / 2 - 50,
                                self.canvas.winfo_width() / 2 + 50,
                                self.canvas.winfo_height() - self.canvas.winfo_height() / 2 + 50, tag='tt')

    def marking(self, lines, startx, starty, stopx, stopy, pxX, pxY):   #Сетка и градуировка
            self.canvas.create_line(3, self.canvas.winfo_height() - 3, 3, 0, width=2, tag='grid')   #Ось OY
            self.canvas.create_line(3, self.canvas.winfo_height() - 3, int(self.WIDTHSCREEN / 2),   #Ось OX
                                    self.canvas.winfo_height() - 3,
                                    width=2, tag='grid')
            for i in range(lines*2):  #Сетка
                self.canvas.create_line(0, int(i*pxY/2), 10, int(i*pxY/2), width=2, tag='grid')   #Насечки оси OY
                self.canvas.create_line(0, int(i*pxY/2), int(self.canvas.winfo_width()),   #Сетка оси OY
                                        int(i*pxY/2), width=1, fill="light grey", tag='grid')
                self.canvas.create_line(int(i*pxX/2), self.canvas.winfo_height()-10,   #Насечки оси OX
                                        int(i*pxX/2), self.canvas.winfo_height(), width=2, tag='grid')
                self.canvas.create_line(int(i*pxX/2), 0, int(i*pxX/2), self.canvas.winfo_height(),   #Сетка оси OX
                                        width=1, fill="light grey", tag='grid')

            for i in range(lines):   #Градуировка оси OY
                self.labelmas[i]["text"] = str(round(float(starty + i+1), 2))
                self.labelmas[i].update()
                self.labelmas[i].place(x=150 - int(self.labelmas[i].winfo_width()),
                                       y=55+self.canvas.winfo_height() - int(self.labelmas[i].winfo_height() / 2) -
                                       (i+1)*pxY)
            for i in range(lines):   #Градуировка оси OX
                self.labelmas[i + lines]["text"] = str(round(float(startx + i+1), 2))
                self.labelmas[i + lines].update()
                self.labelmas[i + lines].place(
                    x=150 + (i+1)*pxX - int(self.labelmas[i].winfo_width() / 2),
                    y=55 + self.canvas.winfo_height())
            self.label0x['text'] = str(round(startx, 2))   #Начальное значение ширины
            self.label0x.update()
            self.label0x.place(x=150, y=55 + self.canvas.winfo_height())
            self.label0y['text'] = str(round(starty, 2))   #Начальное значение высоты
            self.label0y.update()
            self.label0y.place(x=150 - int(self.label0y.winfo_width()),
                               y=55 + self.canvas.winfo_height() - self.label0y.winfo_height())

    def drawframe(self, line):   #Обработка логов (логика меток)
        data = line.split()   #Разбиение строки на составляющие
        ID = data[0]   #Название метки
        match_flag = 0
        self.updateflag += 1
        if self.updateflag > 10:   #Обновление меток
            for tag in self.tags:
                tag.drawme(self.canvas, self.listcoords, self.pxinX, self.pxinY, self.tags, self.startxnow, self.startynow,
                           self.maxxnow, self.maxynow)
            self.updateflag = 0   #Флаг новая/старая метка

        for tag in self.tags:
            if tag.check(data):
                #Выбор цвета метки
                self.select = list(self.listcolors.curselection())
                if len(self.select) != 0:
                    self.butblack.place(x=150 + self.canvas.winfo_width() + 5,
                                        y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 150, width=30, height=20)
                    self.butgreen.place(x=150 + self.canvas.winfo_width() + 5,
                                        y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 25, width=30, height=20)
                    self.butyellow.place(x=150 + self.canvas.winfo_width() + 5,
                                         y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 50, width=30,
                                         height=20)
                    self.butblue.place(x=150 + self.canvas.winfo_width() + 5,
                                       y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 75, width=30, height=20)
                    self.butorange.place(x=150 + self.canvas.winfo_width() + 5,
                                         y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 100, width=30,
                                         height=20)
                    self.butred.place(x=150 + self.canvas.winfo_width() + 5,
                                      y=int(self.HEIGHTSCREEN - self.HEIGHTSCREEN / 3) - 10 - 125, width=30, height=20)
                tag.update(data, self.tagcolor, self.listcolors, self.tags)   #Обновление метки
                self.tagcolor = " "
                tag.drawme(self.canvas, self.listcoords, self.pxinX, self.pxinY, self.tags, self.startxnow, self.startynow,
                           self.maxxnow, self.maxynow)   #Прорисовка метки
                match_flag = 1

        if match_flag == 0:
            tag = Tag(data, self.listcolors)
            print("NEW TAG")
            self.tags.append(tag)   #Добавление метки
            tag.drawme(self.canvas, self.listcoords, self.pxinX, self.pxinY, self.tags, self.startxnow, self.startynow,
                       self.maxxnow, self.maxynow)   #Прорисовка метки

    def start(self):   #Кнопка START
        filename = fd.askopenfilename()   #Диалоговое окно при чтении из файла
        f = open(filename, 'r')
        while True:
            line = f.readline()   #Чтение по строкам
            if not line:
                break
            else:
                self.drawframe(line)
                time.sleep(0.05)
        # while True:   #Получение данных с сервера
        #     current_message = ""
        #     if len(self.web_message_buffer) > 0:
        #         current_message = self.web_message_buffer.pop()
        #         print(current_message)
        #         self.drawframe(current_message)

    def close(self):   #Кнопка закрытия программы
        self.tk.destroy()

a=peers_gui()
a.tk.mainloop()





























import asyncio
import logging
import threading
import websockets
from websockets import WebSocketServerProtocol
import logsreader
logging.basicConfig(level=logging.INFO)
SERVER = '192.168.43.196'
PORT = "5050"


class Web_client():   #Сервер

    def __init__(self, ipaddres, port):
        self.ipaddr = ipaddres
        self.port = port
        self.websocket_resourse_url = f"ws://{SERVER}:{PORT}/web"

    async def handler(self, websocket: WebSocketServerProtocol) -> None:
        consumer_task = asyncio.ensure_future(
            self.consumer_handler(websocket))
        producer_task = asyncio.ensure_future(
            self.producer_handler(websocket))
        done, pending = await asyncio.wait(
            [consumer_task, producer_task],
            return_when=asyncio.FIRST_COMPLETED,
        )
        for task in pending:
            task.cancel()

    async def consumer_handler(self,websocket: WebSocketServerProtocol):
        async for message in websocket:
            await self.consumer(message)

    async def consumer(self, message):
        await asyncio.sleep(0.0001)
        gui.web_message_buffer.append(message)

    async def producer_handler(self,websocket: WebSocketServerProtocol):
        while True:
            await asyncio.sleep(0.0001)
            message = await self.producer()

    async def producer(self):
       await asyncio.sleep(0.0001)

    def log_message(self,message: str) -> None:
        logging.info(f"Message:{message}")

    async def connect(self):
        async with websockets.connect(self.websocket_resourse_url) as ws:
            await self.handler(ws)


def asyncio_thread(async_loop):
    async_loop.run_until_complete(client.connect())


if __name__ == '__main__':
    gui = logsreader.peers_gui()
    client = Web_client("192.168.0.174", "5050")
    loop = asyncio.get_event_loop()
    threading.Thread(target=asyncio_thread, args=(loop,)).start()
    gui.tk.mainloop()






































import random
from math import sqrt
from tkinter import *


class Tag():

    def __init__(self, data, listcolors):   #Класс меток
        self.ID = str(data[0])
        self.colormas = ["green", "yellow", "black", "orange", "red", "blue", "grey"]   #Доступные цвета
        self.color = random.choice(self.colormas)   #Изначально задается случайный цвет из доступных цветов
        self.label = Label(text=self.ID, bg='white', font=("Arial", 7))   #Название метки сверху
        self.label.pack()
        self.label.place(x=1000000, y=1000000)   #Изначально пакуем и убираем далеко, чтобы не мешалось
        listcolors.insert('end', "Color: " + str(self.color))   #Табло с цветами меток
        self.x = float(data[1])+5   #Координата метки по оси OX
        self.y = float(data[2])+5   #Координата метки по оси OY
        self.maspathx = []   #Массив последних 5 точек по оси OX метки для прорисовки следа
        self.maspathy = []   #Массив последних 5 точек по оси OY метки для прорисовки следа

    def check(self, data):   #Проверка новая/старая метка
        if (data[0]) == (self.ID):
            return True
        else:
            return False

    def update(self, data, color, listcolors, tags):   #Обновление метки
        self.x = float(data[1])+5   #Обновление координаты по оси OX
        self.y = float(data[2])+5   #Обновление координаты по оси OY
        if len(self.maspathx) == 5:   #проверка длины пути метки (если больше 5, удаляем самую старую метки и добавляем новую)
            del self.maspathx[0]
            del self.maspathy[0]
        self.maspathx.append(self.x)
        self.maspathy.append(self.y)

        if color == " ":
            pass
        else:
            listcolors.delete(0, 'end')
            for tag in tags:
                listcolors.insert('end', "Color: " + str(tag.color))   #Обновление табло с цветами

    def drawme(self, canvas, listcoords, pxinX, pxinY, tags, startx, starty, stopx, stopy):   #Отрисовка меток
        canvas.delete('ID'+str(self.ID))   #Удаление старых меток
        canvas.create_oval(int((self.x-startx)*pxinX) - int(3*10/(stopx-startx)),
                           canvas.winfo_height()-int((self.y-starty)*pxinY) - int(3*10/(stopy-starty)),
                           int((self.x-startx)*pxinX) + int(3*10/(stopx-startx)),
                           canvas.winfo_height()-int((self.y-starty)*pxinY) + int(3*10/(stopy-starty)),
                           fill=self.color, tag='ID'+str(self.ID))

        self.label.update()   #Обновление названия метки сверху
        self.label.place(x=int((self.x-startx)*pxinX) + 150 - self.label.winfo_width() / 2,   #Изменение координаты названия метки
                         y=canvas.winfo_height()-int((self.y-starty)*pxinY) - self.label.winfo_height() - 10 + 55)

        canvas.delete('path')   #Удаление старого следа
        for j in range(len(self.maspathx)):   #Отрисока нового следа
            if j == 0:   #Первая точка
                canvas.create_oval(int((self.maspathx[j]-startx) * pxinX) - int(1*10/(stopx-startx)),
                                   canvas.winfo_height() - int((self.maspathy[j]-starty) * pxinY) - int(1*10/(stopy-starty)),
                                   int((self.maspathx[j]-startx) * pxinX) + int(1*10/(stopx-startx)),
                                   canvas.winfo_height() - int((self.maspathy[j]-starty) * pxinY) + int(1*10/(stopy-starty)),
                                   fill=self.color, tag='path')
            if j == 1:   #Вторая точка
                canvas.create_oval(int((self.maspathx[j]-startx) * pxinX) - int(1*10/(stopx-startx)),
                                   canvas.winfo_height() - int((self.maspathy[j]-starty) * pxinY) - int(1*10/(stopy-starty)),
                                   int((self.maspathx[j]-startx) * pxinX) + int(1*10/(stopx-startx)),
                                   canvas.winfo_height() - int((self.maspathy[j]-starty) * pxinY) + int(1*10/(stopy-starty)),
                                   fill=self.color, tag='path')
            if j == 2:   #Третья точка
                canvas.create_oval(int((self.maspathx[j]-startx) * pxinX) - int(2*10/(stopx-startx)),
                                   canvas.winfo_height() - int((self.maspathy[j]-starty) * pxinY) - int(2*10/(stopy-starty)),
                                   int((self.maspathx[j]-startx) * pxinX) + int(2*10/(stopx-startx)),
                                   canvas.winfo_height() - int((self.maspathy[j]-starty) * pxinY) + int(2*10/(stopy-starty)),
                                   fill=self.color, tag='path')
            if j == 3:   #Четвертая точка
                canvas.create_oval(int((self.maspathx[j]-startx) * pxinX) - int(2*10/(stopx-startx)),
                                   canvas.winfo_height() - int((self.maspathy[j]-starty) * pxinY) - int(2*10/(stopy-starty)),
                                   int((self.maspathx[j]-startx) * pxinX) + int(2*10/(stopx-startx)),
                                   canvas.winfo_height() - int((self.maspathy[j]-starty) * pxinY) + int(2*10/(stopy-starty)),
                                   fill=self.color, tag='path')
            if j == 4:   #Пятая точка
                canvas.create_oval(int((self.maspathx[j]-startx) * pxinX) - int(3*10/(stopx-startx)),
                                   canvas.winfo_height() - int((self.maspathy[j]-starty) * pxinY) - int(3*10/(stopy-starty)),
                                   int((self.maspathx[j]-startx) * pxinX) + int(3*10/(stopx-startx)),
                                   canvas.winfo_height() - int((self.maspathy[j]-starty) * pxinY) + int(3*10/(stopy-starty)),
                                   fill=self.color, tag='path')

        listcoords.delete(0, 'end')   #Удаление старых координат их табло
        for tag in tags:   #Запись новых координат в табло
            listcoords.insert('end', tag.ID + " X: " + str(round(tag.x, 2)) + " Y: " + str(round(tag.y, 2)))
